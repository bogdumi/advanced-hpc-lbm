Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -std=c99 -Wall -Ofast -march=broadwell -restrict -qopt-report=5 -qopt-report-phase=vec -qopenmp -lm -o d2q9-bgk -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib/release_mt -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib -Xlinker --enable-new-dtags -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib/release_mt -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/2017.0.0/intel64/lib/release_mt -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/2017.0.0/intel64/lib -lmpifort -lmpi -lmpigi -ldl -lrt -lpthread

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(802,3) inlined into d2q9-bgk.c(173,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(804,5) inlined into d2q9-bgk.c(173,3)
   <Peeled loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(804,5) inlined into d2q9-bgk.c(173,3)
   <Distributed chunk1>
      remark #15389: vectorization support: reference obstacles[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(816,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 5.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(804,5) inlined into d2q9-bgk.c(173,3)
   <Remainder loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(804,5) inlined into d2q9-bgk.c(173,3)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between cells->speeds0[c] (807:9) and cells->speeds8[c] (815:9)
      remark #15346: vector dependence: assumed OUTPUT dependence between cells->speeds8[c] (815:9) and cells->speeds0[c] (807:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(821,3) inlined into d2q9-bgk.c(173,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at d2q9-bgk.c(182,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(527,3) inlined into d2q9-bgk.c(186,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(532,5) inlined into d2q9-bgk.c(186,19)
         remark #15388: vectorization support: reference cells->speeds0[c] has aligned access   [ d2q9-bgk.c(541,27) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,49) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,71) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,93) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,115) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,137) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,159) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,181) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,203) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(544,22) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(544,44) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(544,66) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(544,89) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(544,111) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(544,133) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(546,22) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(546,44) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(546,66) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(546,89) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(546,111) ]
         remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(546,133) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.299
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15454: masked aligned unit stride loads: 20 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 121 
         remark #15477: vector cost: 30.120 
         remark #15478: estimated potential speedup: 3.830 
         remark #15486: divides: 2 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(532,5) inlined into d2q9-bgk.c(186,19)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(570,3) inlined into d2q9-bgk.c(211,43)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(575,5) inlined into d2q9-bgk.c(211,43)
      remark #15388: vectorization support: reference cells[c] has aligned access   [ d2q9-bgk.c(584,27) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,49) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,93) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,71) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,137) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,159) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,115) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,181) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,203) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,133) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,133) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.065
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15454: masked aligned unit stride loads: 20 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 123 
      remark #15477: vector cost: 42.370 
      remark #15478: estimated potential speedup: 2.820 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(575,5) inlined into d2q9-bgk.c(211,43)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, int, int, int, int, int, float *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(496,3) inlined into d2q9-bgk.c(316,5)
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(507,7) ]
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(507,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(508,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(508,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(509,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(509,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(511,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(511,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(512,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(512,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(513,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(513,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.130
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 10 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 8.620 
   remark #15478: estimated potential speedup: 2.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(342,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(346,5)
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(357,7) ]
      remark #15388: vectorization support: reference cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(357,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(358,7) ]
      remark #15388: vectorization support: reference cells->speeds1[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(358,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(359,7) ]
      remark #15388: vectorization support: reference cells->speeds2[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(359,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(360,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(361,7) ]
      remark #15388: vectorization support: reference cells->speeds4[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(361,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(362,7) ]
      remark #15388: vectorization support: reference cells->speeds5[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(362,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(363,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(364,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(365,7) ]
      remark #15388: vectorization support: reference cells->speeds8[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(365,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(372,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(373,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(374,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(375,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(376,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(377,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(378,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(379,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(381,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(382,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(383,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(384,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(385,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(386,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(387,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(388,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(399,27) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(400,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(401,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(402,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(403,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(404,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(405,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(406,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(407,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(410,22) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(411,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(412,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(413,24) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(414,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(415,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(418,22) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(419,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(420,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(421,24) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(422,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(423,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(456,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(456,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(456,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(457,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(457,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(457,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(458,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(458,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(458,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(459,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(459,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(459,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(460,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(460,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(460,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(461,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(461,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(461,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(462,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(462,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(462,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(463,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(463,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(463,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(464,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(464,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(464,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(381,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(382,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(383,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(384,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(385,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(386,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(387,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(388,9) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds3[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(360,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds6[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(363,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds7[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(364,33) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.100
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 62 
      remark #15449: unmasked aligned unit stride stores: 26 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 377 
      remark #15477: vector cost: 104.120 
      remark #15478: estimated potential speedup: 3.480 
      remark #15482: vectorized math library calls: 1 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(346,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(346,5)
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(357,7) ]
      remark #15388: vectorization support: reference cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(357,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(358,7) ]
      remark #15388: vectorization support: reference cells->speeds1[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(358,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(359,7) ]
      remark #15388: vectorization support: reference cells->speeds2[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(359,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(360,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(361,7) ]
      remark #15388: vectorization support: reference cells->speeds4[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(361,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(362,7) ]
      remark #15388: vectorization support: reference cells->speeds5[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(362,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(363,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(364,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(365,7) ]
      remark #15388: vectorization support: reference cells->speeds8[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(365,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(372,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(373,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(374,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(375,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(376,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(377,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(378,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(379,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(381,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(382,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(383,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(384,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(385,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(386,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(387,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(388,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(399,27) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(400,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(401,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(402,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(403,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(404,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(405,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(406,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(407,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(410,22) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(411,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(412,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(413,24) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(414,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(415,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(418,22) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(419,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(420,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(421,24) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(422,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(423,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(456,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(456,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(456,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(457,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(457,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(457,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(458,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(458,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(458,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(459,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(459,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(459,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(460,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(460,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(460,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(461,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(461,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(461,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(462,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(462,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(462,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(463,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(463,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(463,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(464,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(464,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(464,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(381,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(382,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(383,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(384,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(385,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(386,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(387,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(388,9) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds3[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(360,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds6[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(363,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds7[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(364,33) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.100
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 62 
      remark #15449: unmasked aligned unit stride stores: 26 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 377 
      remark #15477: vector cost: 104.120 
      remark #15478: estimated potential speedup: 3.480 
      remark #15482: vectorized math library calls: 1 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(346,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: gather(const t_param, t_speed *__restrict__, t_speed *__restrict__, float *, float *, int, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(610,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between displCount[i] (611:5) and displCount[i-1] (611:5)
LOOP END

LOOP BEGIN at d2q9-bgk.c(610,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(637,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(637,5)
   remark #15388: vectorization support: reference av_vels_total[i] has aligned access   [ d2q9-bgk.c(638,7) ]
   remark #15388: vectorization support: reference av_vels_total[i] has aligned access   [ d2q9-bgk.c(638,26) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.100
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 34 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 19.720 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(637,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: write_values(const t_param, t_speed *, int *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(933,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(963,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds1 (949:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (963:7)
   remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (963:7) and cells->speeds1 (949:9)

   LOOP BEGIN at d2q9-bgk.c(935,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(963,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between cells->speeds1 (949:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (963:7)
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (963:7) and cells->speeds1 (949:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(976,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(978,5) ]
LOOP END
===========================================================================

Begin optimization report for: accelerate_flow_cells(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(496,3)
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(507,7) ]
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(507,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(508,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(508,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(509,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(509,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(511,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(511,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(512,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(512,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(513,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(513,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.130
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 10 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 8.620 
   remark #15478: estimated potential speedup: 2.270 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed *__restrict__, int *__restrict__, int, int, int, int, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(527,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(532,5)
      remark #15388: vectorization support: reference cells->speeds0[c] has aligned access   [ d2q9-bgk.c(541,27) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,49) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,71) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,93) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,115) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,137) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,159) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,181) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(541,203) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(544,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(544,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(544,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(544,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(544,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(544,133) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(546,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(546,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(546,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(546,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(546,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(546,133) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.091
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15454: masked aligned unit stride loads: 20 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 121 
      remark #15477: vector cost: 30.120 
      remark #15478: estimated potential speedup: 3.850 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(532,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: av_velocity_reynolds(const t_param, t_speed *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(570,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(575,5)
      remark #15388: vectorization support: reference cells->speeds0[c] has aligned access   [ d2q9-bgk.c(584,27) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,49) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,71) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,93) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,115) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,137) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,159) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,181) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,203) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,133) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,133) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.065
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15454: masked aligned unit stride loads: 20 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 123 
      remark #15477: vector cost: 42.370 
      remark #15478: estimated potential speedup: 2.820 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(575,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(570,3) inlined into d2q9-bgk.c(897,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(575,5) inlined into d2q9-bgk.c(897,10)
      remark #15388: vectorization support: reference cells[c] has aligned access   [ d2q9-bgk.c(584,27) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,49) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,93) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,71) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,137) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,159) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,115) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,181) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(584,203) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(587,133) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(589,133) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.065
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15454: masked aligned unit stride loads: 20 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 123 
      remark #15477: vector cost: 42.370 
      remark #15478: estimated potential speedup: 2.820 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(575,5) inlined into d2q9-bgk.c(897,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: total_density(const t_param, t_speed *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(904,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(906,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(906,5)
      remark #15389: vectorization support: reference cells->speeds0[c] has unaligned access   [ d2q9-bgk.c(909,17) ]
      remark #15389: vectorization support: reference cells->speeds1[c] has unaligned access   [ d2q9-bgk.c(909,39) ]
      remark #15389: vectorization support: reference cells->speeds2[c] has unaligned access   [ d2q9-bgk.c(909,61) ]
      remark #15389: vectorization support: reference cells->speeds3[c] has unaligned access   [ d2q9-bgk.c(909,83) ]
      remark #15389: vectorization support: reference cells->speeds4[c] has unaligned access   [ d2q9-bgk.c(909,105) ]
      remark #15389: vectorization support: reference cells->speeds5[c] has unaligned access   [ d2q9-bgk.c(909,127) ]
      remark #15389: vectorization support: reference cells->speeds6[c] has unaligned access   [ d2q9-bgk.c(909,149) ]
      remark #15389: vectorization support: reference cells->speeds7[c] has unaligned access   [ d2q9-bgk.c(909,171) ]
      remark #15389: vectorization support: reference cells->speeds8[c] has unaligned access   [ d2q9-bgk.c(909,193) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.017
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(906,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->speeds0[c] has unaligned access   [ d2q9-bgk.c(909,17) ]
      remark #15389: vectorization support: reference cells->speeds1[c] has unaligned access   [ d2q9-bgk.c(909,39) ]
      remark #15389: vectorization support: reference cells->speeds2[c] has unaligned access   [ d2q9-bgk.c(909,61) ]
      remark #15389: vectorization support: reference cells->speeds3[c] has unaligned access   [ d2q9-bgk.c(909,83) ]
      remark #15389: vectorization support: reference cells->speeds4[c] has unaligned access   [ d2q9-bgk.c(909,105) ]
      remark #15389: vectorization support: reference cells->speeds5[c] has unaligned access   [ d2q9-bgk.c(909,127) ]
      remark #15389: vectorization support: reference cells->speeds6[c] has unaligned access   [ d2q9-bgk.c(909,149) ]
      remark #15389: vectorization support: reference cells->speeds7[c] has unaligned access   [ d2q9-bgk.c(909,171) ]
      remark #15389: vectorization support: reference cells->speeds8[c] has unaligned access   [ d2q9-bgk.c(909,193) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.067
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(906,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed **, t_speed **, int **, float **, float **, int *, int *, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(802,3)
   remark #15523: loop was not vectorized: loop control variable jj was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(804,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between *cells_ptr->speeds0 (807:9) and *cells_ptr->speeds8[c] (815:9)
      remark #15346: vector dependence: assumed FLOW dependence between *cells_ptr->speeds8[c] (815:9) and *cells_ptr->speeds0 (807:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(821,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================
