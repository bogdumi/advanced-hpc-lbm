Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -std=c99 -Wall -Ofast -march=broadwell -restrict -qopt-report=5 -qopt-report-phase=vec -qopenmp -lm -o d2q9-bgk -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib/release_mt -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib -Xlinker --enable-new-dtags -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib/release_mt -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/2017.0.0/intel64/lib/release_mt -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/2017.0.0/intel64/lib -lmpifort -lmpi -lmpigi -ldl -lrt -lpthread

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(814,3) inlined into d2q9-bgk.c(171,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(816,5) inlined into d2q9-bgk.c(171,3)
   <Peeled loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(816,5) inlined into d2q9-bgk.c(171,3)
   <Distributed chunk1>
      remark #15389: vectorization support: reference obstacles[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(828,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 5.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(816,5) inlined into d2q9-bgk.c(171,3)
   <Remainder loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(816,5) inlined into d2q9-bgk.c(171,3)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between cells->speeds0[c] (819:9) and cells->speeds8[c] (827:9)
      remark #15346: vector dependence: assumed OUTPUT dependence between cells->speeds8[c] (827:9) and cells->speeds0[c] (819:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(833,3) inlined into d2q9-bgk.c(171,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at d2q9-bgk.c(178,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(178,3)
      remark #15388: vectorization support: reference av_vels[tt] has aligned access   [ d2q9-bgk.c(184,5) ]
      remark #15305: vectorization support: vector length 8
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 10.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(178,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(630,3) inlined into d2q9-bgk.c(198,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between displCount[i] (631:5) and displCount[i-1] (631:5)
LOOP END

LOOP BEGIN at d2q9-bgk.c(630,3) inlined into d2q9-bgk.c(198,3)
<Remainder>
LOOP END

LOOP BEGIN at d2q9-bgk.c(200,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(203,9) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(205,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:printf(const char *__restrict__, ...) (203:9) and call:printf(const char *__restrict__, ...) (205:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:printf(const char *__restrict__, ...) (205:7) and call:printf(const char *__restrict__, ...) (203:9)

   LOOP BEGIN at d2q9-bgk.c(201,7)
      remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(203,9) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(590,3) inlined into d2q9-bgk.c(224,43)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(595,5) inlined into d2q9-bgk.c(224,43)
      remark #15388: vectorization support: reference cells[c] has aligned access   [ d2q9-bgk.c(604,27) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,49) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,93) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,71) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,137) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,159) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,115) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,181) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,203) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,133) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,133) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.065
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15454: masked aligned unit stride loads: 20 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 123 
      remark #15477: vector cost: 42.370 
      remark #15478: estimated potential speedup: 2.820 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(595,5) inlined into d2q9-bgk.c(224,43)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: write_values(const t_param, t_speed *, int *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(953,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(983,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds1 (969:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (983:7)
   remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (983:7) and cells->speeds1 (969:9)

   LOOP BEGIN at d2q9-bgk.c(955,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(983,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between cells->speeds1 (969:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (983:7)
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (983:7) and cells->speeds1 (969:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(996,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(998,5) ]
LOOP END
===========================================================================

Begin optimization report for: timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(505,3) inlined into d2q9-bgk.c(328,5)
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(516,7) ]
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(516,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(517,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(517,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(518,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(518,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(520,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(520,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(521,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(521,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(522,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(522,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.130
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 10 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 8.620 
   remark #15478: estimated potential speedup: 2.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(352,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(356,5)
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(367,7) ]
      remark #15388: vectorization support: reference cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(367,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(368,7) ]
      remark #15388: vectorization support: reference cells->speeds1[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(368,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(369,7) ]
      remark #15388: vectorization support: reference cells->speeds2[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(369,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(370,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(371,7) ]
      remark #15388: vectorization support: reference cells->speeds4[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(371,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(372,7) ]
      remark #15388: vectorization support: reference cells->speeds5[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(372,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(373,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(374,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(375,7) ]
      remark #15388: vectorization support: reference cells->speeds8[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(375,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(382,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(383,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(384,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(385,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(386,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(387,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(388,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(389,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(391,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(392,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(393,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(394,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(395,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(396,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(397,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(398,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(409,27) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(410,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(411,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(412,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(413,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(414,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(415,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(416,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(417,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(420,22) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(421,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(422,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(423,24) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(424,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(425,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(428,22) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(429,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(430,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(431,24) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(432,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(433,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(466,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(466,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(466,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(467,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(467,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(467,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(468,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(468,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(468,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(469,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(469,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(469,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(470,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(470,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(470,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(471,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(471,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(471,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(472,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(472,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(472,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(473,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(473,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(473,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(474,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(474,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(474,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(391,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(392,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(393,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(394,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(395,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(396,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(397,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(398,9) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds3[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(370,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds6[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(373,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds7[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(374,33) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.100
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 62 
      remark #15449: unmasked aligned unit stride stores: 26 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 377 
      remark #15477: vector cost: 104.120 
      remark #15478: estimated potential speedup: 3.480 
      remark #15482: vectorized math library calls: 1 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(356,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(356,5)
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(367,7) ]
      remark #15388: vectorization support: reference cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(367,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(368,7) ]
      remark #15388: vectorization support: reference cells->speeds1[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(368,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(369,7) ]
      remark #15388: vectorization support: reference cells->speeds2[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(369,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(370,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(371,7) ]
      remark #15388: vectorization support: reference cells->speeds4[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(371,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(372,7) ]
      remark #15388: vectorization support: reference cells->speeds5[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(372,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(373,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(374,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(375,7) ]
      remark #15388: vectorization support: reference cells->speeds8[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(375,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(382,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(383,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(384,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(385,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(386,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(387,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(388,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(389,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(391,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(392,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(393,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(394,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(395,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(396,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(397,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(398,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(409,27) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(410,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(411,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(412,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(413,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(414,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(415,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(416,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(417,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(420,22) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(421,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(422,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(423,24) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(424,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(425,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(428,22) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(429,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(430,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(431,24) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(432,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(433,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(466,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(466,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(466,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(467,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(467,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(467,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(468,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(468,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(468,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(469,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(469,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(469,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(470,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(470,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(470,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(471,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(471,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(471,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(472,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(472,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(472,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(473,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(473,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(473,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(474,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(474,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(474,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(391,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(392,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(393,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(394,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(395,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(396,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(397,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(398,9) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds3[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(370,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds6[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(373,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds7[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(374,33) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.100
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 62 
      remark #15449: unmasked aligned unit stride stores: 26 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 377 
      remark #15477: vector cost: 104.120 
      remark #15478: estimated potential speedup: 3.480 
      remark #15482: vectorized math library calls: 1 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(356,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: accelerate_flow_cells(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(505,3)
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(516,7) ]
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(516,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(517,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(517,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(518,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(518,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(520,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(520,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(521,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(521,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(522,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(522,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.130
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 10 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 8.620 
   remark #15478: estimated potential speedup: 2.270 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed *__restrict__, int *__restrict__, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(539,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(544,5)
      remark #15388: vectorization support: reference cells->speeds0[c] has aligned access   [ d2q9-bgk.c(553,27) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(553,49) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(553,71) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(553,93) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(553,115) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(553,137) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(553,159) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(553,181) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(553,203) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(556,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(556,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(556,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(556,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(556,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(556,133) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(558,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(558,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(558,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(558,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(558,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(558,133) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.091
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15454: masked aligned unit stride loads: 20 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 121 
      remark #15477: vector cost: 30.120 
      remark #15478: estimated potential speedup: 3.850 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(544,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: av_velocity_reynolds(const t_param, t_speed *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(590,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(595,5)
      remark #15388: vectorization support: reference cells->speeds0[c] has aligned access   [ d2q9-bgk.c(604,27) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,49) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,71) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,93) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,115) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,137) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,159) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,181) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,203) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,133) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,133) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.065
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15454: masked aligned unit stride loads: 20 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 123 
      remark #15477: vector cost: 42.370 
      remark #15478: estimated potential speedup: 2.820 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(595,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: gather(const t_param, t_speed *__restrict__, t_speed *__restrict__, float *, int, int, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(630,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between displCount[i] (631:5) and displCount[i-1] (631:5)
LOOP END

LOOP BEGIN at d2q9-bgk.c(630,3)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(590,3) inlined into d2q9-bgk.c(917,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(595,5) inlined into d2q9-bgk.c(917,10)
      remark #15388: vectorization support: reference cells[c] has aligned access   [ d2q9-bgk.c(604,27) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,49) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,93) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,71) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,137) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,159) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,115) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,181) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(604,203) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(607,133) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(609,133) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.065
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15454: masked aligned unit stride loads: 20 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 123 
      remark #15477: vector cost: 42.370 
      remark #15478: estimated potential speedup: 2.820 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(595,5) inlined into d2q9-bgk.c(917,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: total_density(const t_param, t_speed *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(924,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(926,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(926,5)
      remark #15389: vectorization support: reference cells->speeds0[c] has unaligned access   [ d2q9-bgk.c(929,17) ]
      remark #15389: vectorization support: reference cells->speeds1[c] has unaligned access   [ d2q9-bgk.c(929,39) ]
      remark #15389: vectorization support: reference cells->speeds2[c] has unaligned access   [ d2q9-bgk.c(929,61) ]
      remark #15389: vectorization support: reference cells->speeds3[c] has unaligned access   [ d2q9-bgk.c(929,83) ]
      remark #15389: vectorization support: reference cells->speeds4[c] has unaligned access   [ d2q9-bgk.c(929,105) ]
      remark #15389: vectorization support: reference cells->speeds5[c] has unaligned access   [ d2q9-bgk.c(929,127) ]
      remark #15389: vectorization support: reference cells->speeds6[c] has unaligned access   [ d2q9-bgk.c(929,149) ]
      remark #15389: vectorization support: reference cells->speeds7[c] has unaligned access   [ d2q9-bgk.c(929,171) ]
      remark #15389: vectorization support: reference cells->speeds8[c] has unaligned access   [ d2q9-bgk.c(929,193) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.017
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(926,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->speeds0[c] has unaligned access   [ d2q9-bgk.c(929,17) ]
      remark #15389: vectorization support: reference cells->speeds1[c] has unaligned access   [ d2q9-bgk.c(929,39) ]
      remark #15389: vectorization support: reference cells->speeds2[c] has unaligned access   [ d2q9-bgk.c(929,61) ]
      remark #15389: vectorization support: reference cells->speeds3[c] has unaligned access   [ d2q9-bgk.c(929,83) ]
      remark #15389: vectorization support: reference cells->speeds4[c] has unaligned access   [ d2q9-bgk.c(929,105) ]
      remark #15389: vectorization support: reference cells->speeds5[c] has unaligned access   [ d2q9-bgk.c(929,127) ]
      remark #15389: vectorization support: reference cells->speeds6[c] has unaligned access   [ d2q9-bgk.c(929,149) ]
      remark #15389: vectorization support: reference cells->speeds7[c] has unaligned access   [ d2q9-bgk.c(929,171) ]
      remark #15389: vectorization support: reference cells->speeds8[c] has unaligned access   [ d2q9-bgk.c(929,193) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.067
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(926,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed **, t_speed **, int **, float **, int *, int *, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(814,3)
   remark #15523: loop was not vectorized: loop control variable jj was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(816,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between *cells_ptr->speeds0 (819:9) and *cells_ptr->speeds8[c] (827:9)
      remark #15346: vector dependence: assumed FLOW dependence between *cells_ptr->speeds8[c] (827:9) and *cells_ptr->speeds0 (819:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(833,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================
