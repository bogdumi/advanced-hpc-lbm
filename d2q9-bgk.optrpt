Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -std=c99 -Wall -O3 -march=broadwell -restrict -qopt-report=5 -qopt-report-phase=vec -qopenmp -lm -o d2q9-bgk -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib/release_mt -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib -Xlinker --enable-new-dtags -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib/release_mt -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/2017.0.0/intel64/lib/release_mt -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/2017.0.0/intel64/lib -lmpifort -lmpi -lmpigi -ldl -lrt -lpthread

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(177,3)
   remark #15523: loop was not vectorized: loop control variable tt was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at d2q9-bgk.c(445,27) inlined into d2q9-bgk.c(182,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(436,5) inlined into d2q9-bgk.c(182,19)
      remark #15388: vectorization support: reference cells[c] has aligned access   [ d2q9-bgk.c(445,27) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,49) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,93) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,71) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,137) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,159) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,115) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,181) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,203) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,133) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,133) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.066
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15454: masked aligned unit stride loads: 20 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 121 
      remark #15477: vector cost: 41.870 
      remark #15478: estimated potential speedup: 2.810 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(436,5) inlined into d2q9-bgk.c(182,19)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(431,3) inlined into d2q9-bgk.c(200,41)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(436,5) inlined into d2q9-bgk.c(200,41)
      remark #15388: vectorization support: reference cells[c] has aligned access   [ d2q9-bgk.c(445,27) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,49) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,93) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,71) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,137) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,159) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,115) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,181) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,203) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,133) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,133) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.066
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15454: masked aligned unit stride loads: 20 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 121 
      remark #15477: vector cost: 41.870 
      remark #15478: estimated potential speedup: 2.810 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(436,5) inlined into d2q9-bgk.c(200,41)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(397,3) inlined into d2q9-bgk.c(220,3)
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(408,7) ]
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(408,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(409,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(409,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(410,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(410,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(412,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(412,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(413,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(413,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(414,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(414,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.130
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 10 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 8.620 
   remark #15478: estimated potential speedup: 2.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(358,61)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(248,5)
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(259,7) ]
      remark #15388: vectorization support: reference cells->speeds0[ii+jj*?] has aligned access   [ d2q9-bgk.c(259,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(260,7) ]
      remark #15388: vectorization support: reference cells->speeds1[x_w+jj*?] has aligned access   [ d2q9-bgk.c(260,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(261,7) ]
      remark #15388: vectorization support: reference cells->speeds2[ii+y_s*?] has aligned access   [ d2q9-bgk.c(261,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(262,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(263,7) ]
      remark #15388: vectorization support: reference cells->speeds4[ii+y_n*?] has aligned access   [ d2q9-bgk.c(263,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(264,7) ]
      remark #15388: vectorization support: reference cells->speeds5[x_w+y_s*?] has aligned access   [ d2q9-bgk.c(264,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(265,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(266,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(267,7) ]
      remark #15388: vectorization support: reference cells->speeds8[x_w+y_n*?] has aligned access   [ d2q9-bgk.c(267,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(274,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(275,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(276,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(277,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(278,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(279,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(280,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(281,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(283,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(284,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(285,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(286,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(287,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(288,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(289,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(290,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(301,27) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(302,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(303,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(304,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(305,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(306,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(307,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(308,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(309,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(312,22) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(313,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(314,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(315,24) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(316,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(317,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(320,22) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(321,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(322,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(323,24) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(324,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(325,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(358,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(358,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(358,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(359,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(359,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(359,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(360,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(360,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(360,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(361,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(361,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(361,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(362,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(362,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(362,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(363,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(363,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(363,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(364,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(364,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(364,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(365,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(365,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(365,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(366,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(366,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(366,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(283,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(284,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(285,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(286,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(287,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(288,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(289,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(290,9) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds3[x_e+jj*?]>, part of index is nonlinearly computed   [ d2q9-bgk.c(262,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds6[x_e+y_s*?]>, part of index is nonlinearly computed   [ d2q9-bgk.c(265,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds7[x_e+y_n*?]>, part of index is nonlinearly computed   [ d2q9-bgk.c(266,33) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.053
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 62 
      remark #15449: unmasked aligned unit stride stores: 26 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 705 
      remark #15477: vector cost: 197.370 
      remark #15478: estimated potential speedup: 3.440 
      remark #15482: vectorized math library calls: 1 
      remark #15486: divides: 27 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(248,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(248,5)
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(259,7) ]
      remark #15388: vectorization support: reference cells->speeds0[ii+jj*?] has aligned access   [ d2q9-bgk.c(259,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(260,7) ]
      remark #15388: vectorization support: reference cells->speeds1[x_w+jj*?] has aligned access   [ d2q9-bgk.c(260,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(261,7) ]
      remark #15388: vectorization support: reference cells->speeds2[ii+y_s*?] has aligned access   [ d2q9-bgk.c(261,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(262,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(263,7) ]
      remark #15388: vectorization support: reference cells->speeds4[ii+y_n*?] has aligned access   [ d2q9-bgk.c(263,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(264,7) ]
      remark #15388: vectorization support: reference cells->speeds5[x_w+y_s*?] has aligned access   [ d2q9-bgk.c(264,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(265,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(266,7) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(267,7) ]
      remark #15388: vectorization support: reference cells->speeds8[x_w+y_n*?] has aligned access   [ d2q9-bgk.c(267,33) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(274,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(275,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(276,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(277,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(278,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(279,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(280,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(281,18) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(283,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(284,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(285,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(286,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(287,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(288,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(289,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(290,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(301,27) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(302,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(303,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(304,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(305,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(306,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(307,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(308,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(309,25) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(312,22) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(313,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(314,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(315,24) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(316,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(317,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(320,22) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(321,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(322,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(323,24) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(324,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(325,23) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(358,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(358,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[c] has aligned access   [ d2q9-bgk.c(358,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(359,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(359,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(359,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(360,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(360,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(360,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(361,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(361,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(361,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(362,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(362,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(362,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(363,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(363,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(363,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(364,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(364,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(364,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(365,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(365,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(365,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(366,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(366,35) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(366,88) ]
      remark #15388: vectorization support: reference tmp_cells->speeds1[c] has aligned access   [ d2q9-bgk.c(283,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds2[c] has aligned access   [ d2q9-bgk.c(284,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds3[c] has aligned access   [ d2q9-bgk.c(285,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds4[c] has aligned access   [ d2q9-bgk.c(286,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds5[c] has aligned access   [ d2q9-bgk.c(287,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds6[c] has aligned access   [ d2q9-bgk.c(288,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds7[c] has aligned access   [ d2q9-bgk.c(289,9) ]
      remark #15388: vectorization support: reference tmp_cells->speeds8[c] has aligned access   [ d2q9-bgk.c(290,9) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds3[x_e+jj*?]>, part of index is nonlinearly computed   [ d2q9-bgk.c(262,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds6[x_e+y_s*?]>, part of index is nonlinearly computed   [ d2q9-bgk.c(265,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speeds7[x_e+y_n*?]>, part of index is nonlinearly computed   [ d2q9-bgk.c(266,33) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.053
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 62 
      remark #15449: unmasked aligned unit stride stores: 26 
      remark #15462: unmasked indexed (or gather) loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 705 
      remark #15477: vector cost: 197.370 
      remark #15478: estimated potential speedup: 3.440 
      remark #15482: vectorized math library calls: 1 
      remark #15486: divides: 27 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(248,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: write_values(const t_param, t_speed *, int *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(736,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(766,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds1 (752:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (766:7)
   remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (766:7) and cells->speeds1 (752:9)

   LOOP BEGIN at d2q9-bgk.c(738,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(766,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between cells->speeds1 (752:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (766:7)
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (766:7) and cells->speeds1 (752:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(779,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(781,5) ]
LOOP END
===========================================================================

Begin optimization report for: accelerate_flow_cells(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(397,3)
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(408,7) ]
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(408,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(409,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(409,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(410,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(410,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(412,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(412,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(413,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(413,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(414,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(414,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.130
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 10 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 8.620 
   remark #15478: estimated potential speedup: 2.270 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(431,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(436,5)
      remark #15388: vectorization support: reference cells->speeds0[c] has aligned access   [ d2q9-bgk.c(445,27) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,49) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,71) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,93) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,115) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,137) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,159) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,181) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,203) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,133) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,133) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.066
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15454: masked aligned unit stride loads: 20 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 121 
      remark #15477: vector cost: 41.870 
      remark #15478: estimated potential speedup: 2.810 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(436,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(431,3) inlined into d2q9-bgk.c(700,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(436,5) inlined into d2q9-bgk.c(700,10)
      remark #15388: vectorization support: reference cells[c] has aligned access   [ d2q9-bgk.c(445,27) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,49) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,93) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,71) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,137) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,159) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,115) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,181) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(445,203) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(448,133) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,22) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,44) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,66) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,89) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,111) ]
      remark #15388: vectorization support: reference *(local_density+c*4) has aligned access   [ d2q9-bgk.c(450,133) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.066
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15454: masked aligned unit stride loads: 20 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 121 
      remark #15477: vector cost: 41.870 
      remark #15478: estimated potential speedup: 2.810 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(436,5) inlined into d2q9-bgk.c(700,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: total_density(const t_param, t_speed *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(707,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(709,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(709,5)
      remark #15389: vectorization support: reference cells->speeds0[c] has unaligned access   [ d2q9-bgk.c(712,17) ]
      remark #15389: vectorization support: reference cells->speeds1[c] has unaligned access   [ d2q9-bgk.c(712,39) ]
      remark #15389: vectorization support: reference cells->speeds2[c] has unaligned access   [ d2q9-bgk.c(712,61) ]
      remark #15389: vectorization support: reference cells->speeds3[c] has unaligned access   [ d2q9-bgk.c(712,83) ]
      remark #15389: vectorization support: reference cells->speeds4[c] has unaligned access   [ d2q9-bgk.c(712,105) ]
      remark #15389: vectorization support: reference cells->speeds5[c] has unaligned access   [ d2q9-bgk.c(712,127) ]
      remark #15389: vectorization support: reference cells->speeds6[c] has unaligned access   [ d2q9-bgk.c(712,149) ]
      remark #15389: vectorization support: reference cells->speeds7[c] has unaligned access   [ d2q9-bgk.c(712,171) ]
      remark #15389: vectorization support: reference cells->speeds8[c] has unaligned access   [ d2q9-bgk.c(712,193) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.017
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(709,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->speeds0[c] has unaligned access   [ d2q9-bgk.c(712,17) ]
      remark #15389: vectorization support: reference cells->speeds1[c] has unaligned access   [ d2q9-bgk.c(712,39) ]
      remark #15389: vectorization support: reference cells->speeds2[c] has unaligned access   [ d2q9-bgk.c(712,61) ]
      remark #15389: vectorization support: reference cells->speeds3[c] has unaligned access   [ d2q9-bgk.c(712,83) ]
      remark #15389: vectorization support: reference cells->speeds4[c] has unaligned access   [ d2q9-bgk.c(712,105) ]
      remark #15389: vectorization support: reference cells->speeds5[c] has unaligned access   [ d2q9-bgk.c(712,127) ]
      remark #15389: vectorization support: reference cells->speeds6[c] has unaligned access   [ d2q9-bgk.c(712,149) ]
      remark #15389: vectorization support: reference cells->speeds7[c] has unaligned access   [ d2q9-bgk.c(712,171) ]
      remark #15389: vectorization support: reference cells->speeds8[c] has unaligned access   [ d2q9-bgk.c(712,193) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.067
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(709,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed **, t_speed **, int **, float **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(626,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at d2q9-bgk.c(607,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between *cells_ptr->speeds0[c] (612:9) and *cells_ptr->speeds8[c] (620:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between *cells_ptr->speeds8[c] (620:9) and *cells_ptr->speeds0[c] (612:9)

   LOOP BEGIN at d2q9-bgk.c(609,5)
      remark #15523: loop was not vectorized: loop control variable ii was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END
===========================================================================
