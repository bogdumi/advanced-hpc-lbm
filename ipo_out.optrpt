Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -std=c99 -Wall -fast -march=broadwell -restrict -qopt-report=5 -qopt-report-phase=vec -qopenmp -lm -o d2q9-bgk

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(170,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(418,3) inlined into d2q9-bgk.c(174,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(420,5) inlined into d2q9-bgk.c(174,19)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(420,5) inlined into d2q9-bgk.c(174,19)
         remark #15389: vectorization support: reference cells->speeds0[c] has unaligned access   [ d2q9-bgk.c(429,27) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,49) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,71) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,93) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,115) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,137) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,159) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,181) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,203) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(432,22) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(432,44) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(432,66) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(432,89) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(432,111) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(432,133) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(434,22) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(434,44) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(434,66) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(434,89) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(434,111) ]
         remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(434,133) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.361
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15456: masked unaligned unit stride loads: 21 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 121 
         remark #15477: vector cost: 32.870 
         remark #15478: estimated potential speedup: 3.290 
         remark #15486: divides: 2 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(420,5) inlined into d2q9-bgk.c(174,19)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(270,3) inlined into d2q9-bgk.c(211,3)
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(281,7) ]
   remark #15388: vectorization support: reference cells->speeds1[c] has aligned access   [ d2q9-bgk.c(281,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(282,7) ]
   remark #15388: vectorization support: reference cells->speeds5[c] has aligned access   [ d2q9-bgk.c(282,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(283,7) ]
   remark #15388: vectorization support: reference cells->speeds8[c] has aligned access   [ d2q9-bgk.c(283,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(285,7) ]
   remark #15388: vectorization support: reference cells->speeds3[c] has aligned access   [ d2q9-bgk.c(285,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(286,7) ]
   remark #15388: vectorization support: reference cells->speeds6[c] has aligned access   [ d2q9-bgk.c(286,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(287,7) ]
   remark #15388: vectorization support: reference cells->speeds7[c] has aligned access   [ d2q9-bgk.c(287,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.127
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 10 
   remark #15449: unmasked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 8.870 
   remark #15478: estimated potential speedup: 2.200 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(234,3)
   remark #15382: vectorization support: call to function collision_cells(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, int) cannot be vectorized   [ d2q9-bgk.c(241,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:collision_cells(const t_param, t_speed *__restrict__, t_spe (241:7) and call:collision_cells(const t_param, t_speed *__restrict__, t_spe (241:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:collision_cells(const t_param, t_speed *__restrict__, t_spe (241:7) and call:collision_cells(const t_param, t_speed *__restrict__, t_spe (241:7)

   LOOP BEGIN at d2q9-bgk.c(237,5)
      remark #15382: vectorization support: call to function collision_cells(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, int) cannot be vectorized   [ d2q9-bgk.c(241,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: collision_cells(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(389,5)
   remark #15389: vectorization support: reference d_equ[_2+5] has unaligned access
   remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(389,44) ]
   remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(389,59) ]
   remark #15389: vectorization support: reference u[_2+5] has unaligned access   [ d2q9-bgk.c(389,66) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.091
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 3.830 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(418,3) inlined into d2q9-bgk.c(662,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(420,5) inlined into d2q9-bgk.c(662,10)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(420,5) inlined into d2q9-bgk.c(662,10)
      remark #15389: vectorization support: reference cells->speeds0[c] has unaligned access   [ d2q9-bgk.c(429,27) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,49) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,71) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,93) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,115) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,137) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,159) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,181) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(429,203) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(432,22) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(432,44) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(432,66) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(432,89) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(432,111) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(432,133) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(434,22) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(434,44) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(434,66) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(434,89) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(434,111) ]
      remark #15389: vectorization support: reference *(local_density+c*4) has unaligned access   [ d2q9-bgk.c(434,133) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.361
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 121 
      remark #15477: vector cost: 32.870 
      remark #15478: estimated potential speedup: 3.290 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(420,5) inlined into d2q9-bgk.c(662,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: write_values(const t_param, t_speed *, int *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(698,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(728,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (728:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (728:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (728:7) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (728:7)

   LOOP BEGIN at d2q9-bgk.c(700,5)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(728,7) ]
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(741,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(743,5) ]
LOOP END
===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed **, t_speed **, int **, float **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at d2q9-bgk.c(590,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(592,5)
   <Peeled loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(592,5)
   <Distributed chunk1>
      remark #15389: vectorization support: reference obstacles_ptr has unaligned access   [ d2q9-bgk.c(604,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 5.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(592,5)
   <Remainder loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(592,5)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between *cells_ptr->speeds0[c] (595:9) and *cells_ptr->speeds8[c] (603:9)
      remark #15346: vector dependence: assumed OUTPUT dependence between *cells_ptr->speeds8[c] (603:9) and *cells_ptr->speeds0[c] (595:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(609,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================
